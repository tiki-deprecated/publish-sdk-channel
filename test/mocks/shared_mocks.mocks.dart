// Mocks generated by Mockito 5.4.2 from annotations
// in tiki_sdk_platform_channel/test/mocks/shared_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:typed_data' as _i8;

import 'package:flutter/src/services/binary_messenger.dart' as _i5;
import 'package:flutter/src/services/message_codec.dart' as _i4;
import 'package:flutter/src/services/platform_channel.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tiki_idp/auth/jwt.dart' as _i2;
import 'package:tiki_idp/registry/registry.dart' as _i3;
import 'package:tiki_idp/tiki_idp.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJWT_0 extends _i1.SmartFake implements _i2.JWT {
  _FakeJWT_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegistry_1 extends _i1.SmartFake implements _i3.Registry {
  _FakeRegistry_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMethodCodec_2 extends _i1.SmartFake implements _i4.MethodCodec {
  _FakeMethodCodec_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBinaryMessenger_3 extends _i1.SmartFake
    implements _i5.BinaryMessenger {
  _FakeBinaryMessenger_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TikiIdp].
///
/// See the documentation for Mockito's code generation for more information.
class MockTikiIdp extends _i1.Mock implements _i6.TikiIdp {
  @override
  _i7.Future<_i2.JWT> get token => (super.noSuchMethod(
        Invocation.getter(#token),
        returnValue: _i7.Future<_i2.JWT>.value(_FakeJWT_0(
          this,
          Invocation.getter(#token),
        )),
        returnValueForMissingStub: _i7.Future<_i2.JWT>.value(_FakeJWT_0(
          this,
          Invocation.getter(#token),
        )),
      ) as _i7.Future<_i2.JWT>);
  @override
  _i7.Future<void> key(
    String? keyId, {
    bool? overwrite = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #key,
          [keyId],
          {#overwrite: overwrite},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<String> export(
    String? keyId, {
    bool? public = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #export,
          [keyId],
          {#public: public},
        ),
        returnValue: _i7.Future<String>.value(''),
        returnValueForMissingStub: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  _i7.Future<void> import(
    String? keyId,
    String? key, {
    bool? public = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #import,
          [
            keyId,
            key,
          ],
          {#public: public},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<_i8.Uint8List> sign(
    String? keyId,
    _i8.Uint8List? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sign,
          [
            keyId,
            message,
          ],
        ),
        returnValue: _i7.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
        returnValueForMissingStub:
            _i7.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i7.Future<_i8.Uint8List>);
  @override
  _i7.Future<bool> verify(
    String? keyId,
    _i8.Uint8List? message,
    _i8.Uint8List? signature,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verify,
          [
            keyId,
            message,
            signature,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<_i3.Registry> register(
    String? user,
    String? address, {
    String? token,
    String? keyId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            user,
            address,
          ],
          {
            #token: token,
            #keyId: keyId,
          },
        ),
        returnValue: _i7.Future<_i3.Registry>.value(_FakeRegistry_1(
          this,
          Invocation.method(
            #register,
            [
              user,
              address,
            ],
            {
              #token: token,
              #keyId: keyId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Registry>.value(_FakeRegistry_1(
          this,
          Invocation.method(
            #register,
            [
              user,
              address,
            ],
            {
              #token: token,
              #keyId: keyId,
            },
          ),
        )),
      ) as _i7.Future<_i3.Registry>);
  @override
  _i7.Future<_i3.Registry> registry(
    String? keyId,
    String? user,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registry,
          [
            keyId,
            user,
          ],
        ),
        returnValue: _i7.Future<_i3.Registry>.value(_FakeRegistry_1(
          this,
          Invocation.method(
            #registry,
            [
              keyId,
              user,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Registry>.value(_FakeRegistry_1(
          this,
          Invocation.method(
            #registry,
            [
              keyId,
              user,
            ],
          ),
        )),
      ) as _i7.Future<_i3.Registry>);
}

/// A class which mocks [MethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannel extends _i1.Mock implements _i9.MethodChannel {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i4.MethodCodec get codec => (super.noSuchMethod(
        Invocation.getter(#codec),
        returnValue: _FakeMethodCodec_2(
          this,
          Invocation.getter(#codec),
        ),
        returnValueForMissingStub: _FakeMethodCodec_2(
          this,
          Invocation.getter(#codec),
        ),
      ) as _i4.MethodCodec);
  @override
  _i5.BinaryMessenger get binaryMessenger => (super.noSuchMethod(
        Invocation.getter(#binaryMessenger),
        returnValue: _FakeBinaryMessenger_3(
          this,
          Invocation.getter(#binaryMessenger),
        ),
        returnValueForMissingStub: _FakeBinaryMessenger_3(
          this,
          Invocation.getter(#binaryMessenger),
        ),
      ) as _i5.BinaryMessenger);
  @override
  _i7.Future<T?> invokeMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);
  @override
  _i7.Future<List<T>?> invokeListMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeListMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i7.Future<List<T>?>.value(),
        returnValueForMissingStub: _i7.Future<List<T>?>.value(),
      ) as _i7.Future<List<T>?>);
  @override
  _i7.Future<Map<K, V>?> invokeMapMethod<K, V>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMapMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i7.Future<Map<K, V>?>.value(),
        returnValueForMissingStub: _i7.Future<Map<K, V>?>.value(),
      ) as _i7.Future<Map<K, V>?>);
  @override
  void setMethodCallHandler(
          _i7.Future<dynamic> Function(_i4.MethodCall)? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setMethodCallHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
}
